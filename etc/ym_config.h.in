#ifndef YM_CONFIG_H
#define YM_CONFIG_H

/// @file ym_config.h
/// @brief システム検査関係の基本定義ファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2016, 2018 Yusuke Matsunaga
/// All rights reserved.


//////////////////////////////////////////////////////////////////////
// システム検査の結果
//////////////////////////////////////////////////////////////////////

// UNIX の時 true となるマクロ
#cmakedefine YM_UNIX

// MAC OS-X の時 true となるマクロ
#cmakedefine YM_APPLE

// Windows の時 true となるマクロ
#cmakedefine YM_WIN32


//////////////////////////////////////////////////////////////////////
// 標準ヘッダファイルのインクルード
//////////////////////////////////////////////////////////////////////

@INCLUDE_STDLIB@
@INCLUDE_STRING@
@INCLUDE_UNISTD@
@INCLUDE_LIMITS@
@INCLUDE_FLOAT@
@INCLUDE_MATH@


//////////////////////////////////////////////////////////////////////
// サイズ固定の組み込み型
//////////////////////////////////////////////////////////////////////

/// @brief ポインタと同サイズの符号なし整数型
typedef @PTRINT_TYPE@ PtrIntType;

/// @brief サイズの指定に使う型
typedef size_t SizeType;


//////////////////////////////////////////////////////////////////////
// システム検査の結果
//////////////////////////////////////////////////////////////////////

// <stdlib.h> が存在する時定義されるマクロ
#cmakedefine YM_HAVE_STDLIB_H

// <string.h> が存在する時定義されるマクロ
#cmakedefine YM_HAVE_STRING_H

// <strings.h> が存在する時定義されるマクロ
#cmakedefine YM_HAVE_STRINGS_H

// <unistd.h> が存在する時定義されるマクロ
#cmakedefine YM_HAVE_UNISTD_H

// <limits.h> が存在する時定義されるマクロ
#cmakedefine YM_HAVE_LIMITS_H

// <float.h> が存在する時定義されるマクロ
#cmakedefine YM_HAVE_FLOAT_H

// <math.h> が存在する時定義されるマクロ
#cmakedefine YM_HAVE_MATH_H

// <sys/time.h> が存在する時定義されるマクロ
#cmakedefine YM_HAVE_SYS_TIME_H

// <time.h> が存在する時定義されるマクロ
#cmakedefine YM_HAVE_TIME_H

// <sys/stat.h> が存在する時定義されるマクロ
#cmakedefine YM_HAVE_SYS_STAT_H

// <pwd.h> が存在する時定義されるマクロ
#cmakedefine YM_HAVE_PWD_H

// <sys/param.h> が存在する時定義されるマクロ
#cmakedefine YM_HAVE_SYS_PARAM_H

// getrusage() が存在する時定義されるマクロ
#cmakedefine YM_HAVE_GETRUSAGE

// times() が存在する時定義されるマクロ
#cmakedefine YM_HAVE_TIMES


//////////////////////////////////////////////////////////////////////
// 名前空間の定義
//////////////////////////////////////////////////////////////////////

/// @brief 名前空間の開始
///
/// @param[in] nm 開始する名前空間名
///
/// namespace でインデントするのがいやなので define マクロでごまかす．
#define BEGIN_NAMESPACE(nm) namespace nm {

/// @brief 名前空間の終了
///
/// @param[in] nm 終了する名前空間名
///
/// 実は nm は使っていない．プログラマの確認用
#define END_NAMESPACE(nm) }

/// @brief 無名の名前空間の開始
#define BEGIN_NONAMESPACE namespace {

/// @brief 無名の名前空間の終了
#define END_NONAMESPACE }

/// @brief 標準(std)の名前空間の開始
#define BEGIN_NAMESPACE_STD BEGIN_NAMESPACE(std)

/// @brief 標準(std)の名前空間の終了
#define END_NAMESPACE_STD  END_NAMESPACE(std)

/// @brief ANSI-C 用の名前空間の開始
#define BEGIN_EXTERN_C extern "C" {

/// @brief ANSI-C 用の名前空間の終了
#define END_EXTERN_C }


//////////////////////////////////////////////////////////////////////
// ym-common 用の名前空間の定義用マクロ
//////////////////////////////////////////////////////////////////////

/// @brief ym-common 用の名前空間の開始
#define BEGIN_NAMESPACE_YM BEGIN_NAMESPACE(@YM_NSNAME@)

/// @brief ym-common 用の名前空間の終了
#define END_NAMESPACE_YM END_NAMESPACE(@YM_NSNAME@)

/// @brief ym-common 用の名前空間
#define YM_NAMESPACE ::@YM_NSNAME@

/// @brief ym-common 用の名前空間の文字列
#define YM_NAMESPACE_STR "::@YM_NSNAME@"

// 雑多な定義
//#include "ym/ym_stl.h"
#include "ym/ym_assert.h"

#endif // YM_CONFIG_H
